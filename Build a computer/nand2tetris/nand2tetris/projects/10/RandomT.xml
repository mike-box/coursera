<tokens>
<keyword> class </keyword>
<identifier> Random </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<identifier> int </identifier>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> seed </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> seed </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> seed </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<identifier> int </identifier>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> < </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> a </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> > </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> - </symbol>
<identifier> b </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> a </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<identifier> int </identifier>
<identifier> next </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<integerConstant> 7919 </integerConstant>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 17 </integerConstant>
<symbol> * </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 7919 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> x </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<identifier> int </identifier>
<identifier> between </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> int </identifier>
<identifier> diff </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> - </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> diff </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
