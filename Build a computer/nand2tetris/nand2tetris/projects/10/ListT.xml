<tokens>
<keyword> class </keyword>
<identifier> List </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> int </identifier>
<identifier> data </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> List </identifier>
<identifier> next </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> List </identifier>
<identifier> prev </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> List </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> car </identifier>
<symbol> , </symbol>
<identifier> List </identifier>
<identifier> cdr </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> data </identifier>
<symbol> = </symbol>
<identifier> car </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> cdr </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> cdr </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> int </identifier>
<identifier> getData </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> data </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> int </identifier>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> next </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> print </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> List </identifier>
<identifier> current </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> current </identifier>
<symbol> = </symbol>
<keyword> this </keyword>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> current </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> current </identifier>
<symbol> . </symbol>
<identifier> getData </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printChar </identifier>
<symbol> ( </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> current </identifier>
<symbol> = </symbol>
<identifier> current </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> next </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
