// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int capbility;
    field int length;
    field Array buffer;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if((maxLength < 0)|(maxLength = 0)){
            let capbility = maxLength;
            return this;
        }
        let length = 0;
        let capbility = maxLength;
        let buffer = Memory.alloc(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if((capbility < 0)|(capbility = 0)){return;}
        do Memory.deAlloc(buffer);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(~(j < length)){return 0;}
        return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(~(j < length)){return;}
        let buffer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length = capbility){return this;}
        let buffer[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length = 0){return;}
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value;
        var int i;
        var int c;
        var bool sig;

        let sig = true;
        let value = 0;
        let i = 0;
        if(buffer[i] = 45){
            let sig = false;
            let i = i + 1;
        }
        while(i < length){
            let c = buffer[i];
            if((c < 48)|(c > 57)){
                return value;
            }
            let value = value*10 + c - 48;
            let i = i + 1;
        }
        if(~sig){
            let value = -value;
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i;
        var int j;
        var int sig;
        var int x;
        var char c;
        var boolean sig;

        let length = 0;
        let sig = true;
        if(val = 0){
            let buffer[0] = 48;
            let length = 1;
            return;
        }
        if(val < 0){
            let val = -val;
            let sig = false;
            let buffer[length] = 45;
            let length = 1;
        }
        while((length < capbility)&(val > 0)){
            let x = val/10;
            let buffer[length] = val - (x*10) + 48;
            let val = x;
            let length = length + 1;
        }
        let i = 0;
        let j = length -1;
        if(~sig){
            let i = 1;
        }
        while(i < j){
            let c = buffer[i];
            let buffer[i] = buffer[j];
            let buffer[j] = c;
            let i = i + 1;
            let j = j - 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /*check the current char is digit*/
    function boolean isDigit(char c){
        if((c < 48)|(c > 57)){
            return false;
        }
        return true;
    }
}
