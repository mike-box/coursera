function Screen.init 1
push constant 0
pop static 0
push constant 16
call Array.new 1
pop static 2
push constant 0
push static 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 2
add
push local 0
push constant 1
sub
push static 2
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 2
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.clearScreen 3
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 256
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 32
lt
not
if-goto WHILE_END1
push local 0
push constant 256
call Math.multiply 2
push local 1
push constant 16
call Math.multiply 2
add
push constant 16384
add
pop local 2
push local 2
push constant 0
call Memory.poke 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 0
push local 0
call Memory.peek 1
pop local 2
push argument 0
push argument 0
push constant 15
not
and
sub
pop local 1
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 2
push local 1
push static 2
add
pop pointer 1
push that 0
or
call Memory.poke 2
pop temp 0
goto IF_END0
label IF_FALSE0
push local 0
push local 2
push local 1
push static 2
add
pop pointer 1
push that 0
not
and
call Memory.poke 2
pop temp 0
label IF_END0
push constant 0
return
function Screen.drawHorizontalLine 5
push argument 0
push argument 0
push constant 15
not
and
sub
pop local 3
push argument 1
push argument 1
push constant 15
not
and
sub
pop local 4
push argument 0
push argument 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 2
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push argument 0
sub
push constant 16
lt
push local 4
push local 3
gt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 32
push argument 2
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 2
push local 2
call Memory.peek 1
pop local 1
push local 4
push static 2
add
pop pointer 1
push that 0
push constant 1
sub
push local 3
push static 2
add
pop pointer 1
push that 0
push constant 1
sub
not
and
pop local 0
push static 0
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 2
push local 1
push local 0
or
call Memory.poke 2
pop temp 0
goto IF_END2
label IF_FALSE2
push local 2
push local 1
push local 0
not
and
call Memory.poke 2
pop temp 0
label IF_END2
push constant 0
return
label IF_FALSE1
push local 3
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 32
push argument 2
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 2
push local 2
call Memory.peek 1
pop local 1
push local 3
push static 2
add
pop pointer 1
push that 0
push constant 1
sub
pop local 0
push static 0
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 2
push local 1
push local 0
not
or
call Memory.poke 2
pop temp 0
goto IF_END4
label IF_FALSE4
push local 2
push local 1
push local 0
and
call Memory.poke 2
pop temp 0
label IF_END4
push argument 0
push constant 16
add
push local 3
sub
pop argument 0
label IF_FALSE3
push local 4
push constant 0
gt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 32
push argument 2
call Math.multiply 2
push argument 1
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 2
push local 2
call Memory.peek 1
pop local 1
push local 4
push static 2
add
pop pointer 1
push that 0
push constant 1
sub
pop local 0
push static 0
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 2
push local 1
push local 0
or
call Memory.poke 2
pop temp 0
goto IF_END6
label IF_FALSE6
push local 2
push local 1
push local 0
not
and
call Memory.poke 2
pop temp 0
label IF_END6
push argument 1
push local 4
sub
pop argument 1
label IF_FALSE5
label WHILE_EXP0
push argument 0
push argument 1
lt
not
if-goto WHILE_END0
push constant 32
push argument 2
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
push constant 16384
add
pop local 2
push local 2
call Memory.peek 1
pop local 1
push static 0
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 2
push local 1
push constant 0
not
or
call Memory.poke 2
pop temp 0
goto IF_END7
label IF_FALSE7
push local 2
push local 1
push constant 0
and
call Memory.poke 2
pop temp 0
label IF_END7
push argument 0
push constant 16
add
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawLine 9
push argument 0
push argument 2
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push argument 3
push argument 0
push argument 1
call Screen.drawLine 4
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 0
push argument 2
eq
push argument 1
push argument 3
eq
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE1
push argument 0
push argument 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push argument 3
call Math.min 2
pop local 4
push argument 1
push argument 3
call Math.max 2
pop local 5
label WHILE_EXP0
push local 4
push local 5
gt
not
not
if-goto WHILE_END0
push argument 0
push local 4
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
label IF_FALSE2
push argument 1
push argument 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
push argument 2
call Math.min 2
push argument 0
push argument 2
call Math.max 2
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
push constant 0
return
label IF_FALSE3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 8
push argument 2
push argument 0
sub
pop local 2
push argument 3
push argument 1
sub
pop local 3
label WHILE_EXP1
push local 0
push local 2
eq
push local 1
push local 3
eq
and
not
not
if-goto WHILE_END1
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 3
push constant 0
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 8
push constant 0
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 0
push constant 1
add
pop local 0
push local 8
push local 3
add
pop local 8
goto IF_END5
label IF_FALSE5
push local 1
push constant 1
add
pop local 1
push local 8
push local 2
sub
pop local 8
label IF_END5
goto IF_END4
label IF_FALSE4
push local 8
push constant 0
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
push constant 1
add
pop local 0
push local 8
push local 3
add
pop local 8
goto IF_END6
label IF_FALSE6
push local 1
push constant 1
sub
pop local 1
push local 8
push local 2
add
pop local 8
label IF_END6
label IF_END4
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function Screen.drawRectangle 0
push argument 1
push argument 3
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push argument 3
push argument 0
push argument 1
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE0
label WHILE_EXP0
push argument 1
push argument 3
lt
not
if-goto WHILE_END0
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 2
push argument 2
neg
pop local 0
label WHILE_EXP0
push local 0
push constant 0
gt
not
not
if-goto WHILE_END0
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 0
push local 1
sub
push argument 0
push local 1
add
push argument 1
push local 0
add
call Screen.drawHorizontalLine 3
pop temp 0
push argument 0
push local 1
sub
push argument 0
push local 1
add
push argument 1
push local 0
sub
call Screen.drawHorizontalLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
